#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 1000

typedef struct node
{
    void* item;
    unsigned frequency;
    struct node* left;
    struct node *right;
} node;


typedef struct heap
{
    unsigned size;
    node* nodes[MAX];
} heap;

node* create_node()
{
    node* new_node = (node*)malloc(sizeof(node));
    char ast = 42;
    new_node->item = &ast;
    new_node->frequency = 1;
    new_node->left = NULL;
    new_node->right = NULL;
    return new_node;
}

heap* create_heap()
{
    heap* new_heap = (heap *)malloc(sizeof(heap));
    new_heap->size = 0;
    for(int i=1; i<MAX; i++)
    {
        new_heap->nodes[i]= create_node();
    }
    return new_heap;
}

unsigned get_parent_index(heap *heap, unsigned i)
{
    return i / 2;
}
unsigned get_left_index(heap *heap, unsigned i)
{
    return 2 * i;
}
unsigned get_right_index(heap *heap, unsigned i)
{
    return 2 * i + 1;
}

/*void swap(void *u, void *v)
{
    unsigned char *p = u, *q = v, tmp;
    tmp = *p;
    *p = *q;
    *q = tmp;
}*/

void swap(void *u, void *v, size_t len)
{
    unsigned char *p = u, *q = v, aux;
    for(size_t i = 0; i < len; i++)
    {
        // printf("%hhu ", q[i]);
        aux = p[i];
        p[i] = q[i];
        q[i] = aux;
    }
}

void print_estado_atual(heap *heap)
{
    unsigned i;
    printf("\nheap size: %d\n", heap->size);
    for (i = 1; i <= heap->size; i++)
    {
        if (i == heap->size)
            printf("%c %d\n", *(char *)heap->nodes[i]->item, heap->nodes[i]->frequency);
        else
            printf("%c %d| ", *(char *)heap->nodes[i]->item, heap->nodes[i]->frequency);
    }
    printf("\n");
}

void min_heapify(heap *heap, unsigned i)
{
    unsigned smaller_index;
    unsigned left_index = get_left_index(heap, i);
    unsigned right_index = get_right_index(heap, i);
    if (left_index <= heap->size && heap->nodes[left_index]->frequency < heap->nodes[i]->frequency)
    {
        smaller_index = left_index;
    }
    else
    {
        smaller_index = i;
    }
    if (right_index <= heap->size && heap->nodes[right_index]->frequency < heap->nodes[smaller_index]->frequency)
    {
        smaller_index = right_index;
    }
    if (i != smaller_index)
    {
        printf("antes do swap - NODES[i]: %c NODES[smaller_index]: %c\n", *(char *)heap->nodes[i]->item, *(char *)heap->nodes[smaller_index]->item);
        swap(heap->nodes[i], heap->nodes[smaller_index], sizeof(node));
        printf("depois do swap - NODES[i]: %c NODES[smaller_index]: %c\n", *(char *)heap->nodes[i]->item, *(char *)heap->nodes[smaller_index]->item);
        min_heapify(heap, smaller_index);
    }
}

int is_in_heap(heap* heap, void* item)
{
    unsigned i;
    if(*(char*)item == '*') return 0;
    for(i=1;i <= heap->size;i++)
    {
        if (*(unsigned char *)heap->nodes[i]->item == *(unsigned char *)item) return i;
    }
    return 0;
}

void enqueue(heap *heap, node* new_node)
{
    int i;
    i = is_in_heap(heap, new_node->item);
    if (heap->size >= MAX)
    {
        //printf("Heap overflow");
    }
    else if(i)
    {
        heap->nodes[i]->frequency++;
        min_heapify(heap, i);
    }
    else
    {
        heap->size++;
        heap->nodes[heap->size] = new_node;
        unsigned key_index = heap->size;
        unsigned parent_index = get_parent_index(heap, heap->size);
        while (parent_index >= 1 && heap->nodes[key_index]->frequency < heap->nodes[parent_index]->frequency)
        {
            swap(heap->nodes[key_index], heap->nodes[parent_index], sizeof(node));
            key_index = parent_index;
            parent_index = get_parent_index(heap, key_index);
        }
    }
    //print_estado_atual(heap);
}

node* dequeue(heap *heap)
{
    if (heap->size == 0)
    {
        //printf("Heap underflow");
        return NULL;
    }
    else
    {
        node* dequeued= heap->nodes[1];
        heap->nodes[1] = heap->nodes[heap->size];
        heap->size--;
        min_heapify(heap, 1);
        return dequeued;
    }
}

void test_heap()
{
    heap* heap = create_heap();
    char a[1000];
    node* nodes[1000];
    int i=0;
    while(scanf("%c", &a[i])!=EOF)
    {
        nodes[i]= create_node();
        nodes[i]->item = &a[i];
        enqueue(heap, nodes[i]);
        i++;
    }
    print_estado_atual(heap);
}

void print_pre_order(node *tree)
{
    if (tree != NULL)
    {
        printf("%c(", *(char*)tree->item);
        print_pre_order(tree->left);
        printf(")(");
        print_pre_order(tree->right);
        printf(")");
    }
}

heap* make_heap()
{
    heap* heap = create_heap();
    char a[1000];
    node* nodes[1000];
    int i = 0;
    while (scanf("%c", &a[i]) != EOF)
    {
        nodes[i] = create_node();
        nodes[i]->item = &a[i];
        enqueue(heap, nodes[i]);
        i++;
    }
    return heap;
}

node* make_tree(heap* heap)
{
    node *f1 = dequeue(heap);
    printf("dequeued: %c %d\n", *(char*)f1->item, f1->frequency);
    print_estado_atual(heap);
    node *f2 = dequeue(heap);
  //  printf("dequeued: %c %d\n", *(char *)f2->item, f2->frequency);
    
    print_estado_atual(heap);
    if(f2==NULL)
    {
        printf("(");
        print_pre_order(f1);
        printf(")\n");
        return f1;
    }
    else
    {
        node *parent = create_node();
        parent->left = f1;
        parent->right = f2;
        parent->frequency = f1->frequency + f2->frequency;
        printf("parent item: %c\n", *(char*)parent->item);
        enqueue(heap, parent);
        print_estado_atual(heap);
        printf("(");
        print_pre_order(parent);
        printf(")\n");
        return make_tree(heap);
    }
}



int main()
{
   // test_heap();
    heap* heap = make_heap();
    print_estado_atual(heap);
    node* tree= make_tree(heap);
    printf("(");
    print_pre_order(tree);
    printf(")\n");
    return 0;
}
